# -*-ruby; coding: utf-8 -*- vim:set ft=ruby:
#
# Copyright (c) 2004-2006 SASADA Koichi <ko1 at atdot.net>
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#

=begin

== Abstract

Answer weather information using "Livedoor Weather Web Service / LWWS".

LWWS: http://weather.livedoor.com/weather_hacks/webservice.html


== Usage

  tenki> [CITY] 
  tenki:[today|tomorrow|dayaftertomorrow]> [CITY]

  [CITY] should be city name in Kanji listed on following table.
  http://weather.livedoor.com/forecast/rss/forecastmap.xml

  If timing is not specified, show today's information.


== Configuration

BotConfig = [
{
  :name => :TenkiBot,
  :ch   => /nadoka/,  # default: /.*/
}
]


=end

require 'open-uri'
require 'pp'
require 'kconv'
require 'rexml/document'
require 'date'

module Tenki
  CityIDs = {}

  def init_tenki
    open('http://weather.livedoor.com/forecast/rss/forecastmap.xml'){|f|
      f.each{|line|
        if /city title="(.+?)" id="(\d+)"/ =~ line
          CityIDs[$1.toutf8] = $2.to_i
        end
      }
    }
  end

  def tenki city, timing
    doc = open(
      "http://weather.livedoor.com/forecast/webservice/rest/v1?" \
      "city=#{CityIDs.fetch(city)}&day=#{timing}"){|f|
      REXML::Document.new f.read
    }

    title = doc.elements['/lwws/title/'].text.toutf8
    telop = doc.elements['/lwws/telop/'].text.toutf8
    link = doc.elements['/lwws/link/'].text.toutf8
    desc = doc.elements['/lwws/description/'].text.toutf8
    max = doc.elements['/lwws/temperature/max/celsius/'].text
    min = doc.elements['/lwws/temperature/min/celsius/'].text
    date = Date.parse(doc.elements['/lwws/forecastdate/'].text)
    datestr = date.strftime('%m/%d')

    desc.sub!(/\.\.\..*/m, '...')

    celsius = []
    celsius << "max: #{max}" if max
    celsius << "min: #{min}" if min
    unless celsius.empty?
      celsius = "(#{celsius.join(', ')}) "
    end
    "#{title} (#{datestr}): #{telop} - #{celsius}#{desc} - #{link}"
  end
end

if __FILE__ == $0
  include Tenki
  city = ARGV.shift
  timing = ARGV.shift || 'today'
  if city.nil?
    puts "#$0 city [today|tomorrow|dayaftertomorrow]"
  else
    init_tenki
    begin
      puts tenki(city, timing)
    rescue IndexError
      puts "Unknown city.  Check city title on http://weather.livedoor.com/forecast/rss/forecastmap.xml"
    end
  end
  exit
end

class TenkiBot < Nadoka::NDK_Bot
  include Tenki

  def bot_initialize
    bot_init_utils
    init_tenki
    @nkf = @bot_config[:nkf] || "-Wj"
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch
    return if same_bot?(ch)
    msg = NKF.nkf('-w', msg)
    if /\Atenki(|:(today|tomorrow|dayaftertomorrow))>(.+)/ =~ msg
      city = $3.strip.toutf8
      timing = ($2 || 'today').strip
      begin
        result = tenki(city, timing).gsub(/\n/, ' ')
      rescue IndexError
        result = "Unknown city.  Check city title on http://weather.livedoor.com/forecast/rss/forecastmap.xml"
      rescue => e
        result = "#{e}"
      end
      send_notice ch, NKF.nkf(@nkf, "tenki bot: #{result}")
    end
  end
end
